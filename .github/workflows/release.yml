name: Create Release
run-name: Create Release

on:
  workflow_dispatch:
  workflow_call:
  #push:
  #  tags: [ 'v*' ]

jobs:
  # what this should do is properly do a release of everything here
  # that has a new version in it.  We aren't there yet.  So in the
  # interim assume the main core, c++ bindings, and python bindings
  # are all part of a release now, and they will be using the same version
  # going forward.

  ###
  # Repo Updates
  #   So, fun fact, the way actions/checkout@v4 works it pulls / works based on what triggered it
  #   this leads to a problem because I don't want to progress till various things have completed
  #   in a roughly specific order, but I also need to know what/where things came from - which ok
  #   fair enough.
  #
  #   This means that repo changes, so version changes, changelogs, etc I guess all need to happen
  #   not only at once but somehow need to wait on things down the line outside this triggering to
  #   come back and allow other things to happen.  Or I suppose I snag the sha from versionchange
  #   and pass it along as "latest" in the series, could work too and bypass some of this?
  ###

  create-temp-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      temp_branch_ref: ${{ steps.temp_branch_ref.outputs.temp_branch_ref }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      - name: Figure out branch name
        id: temp_branch_ref
        run: |
          export temp_branch_ref="temp_branch_ref=rc-temp-$( git rev-parse --short HEAD )-$( date +%Y.%m.%d-%H.%M.%S )"
          echo "${temp_branch_ref}"
          echo "${temp_branch_ref}" >> "$GITHUB_OUTPUT"
      - name: Create the branch
        run: git checkout -b "${{ steps.temp_branch_ref.outputs.temp_branch_ref }}"
      - name: Push the branch to work from
        run: git push --branches

  versionchange:
    needs:
      - create-temp-branch
    # Runs on needs to be the oldest we can make it
    # just to make sure that the python environment is the oldest
    # we likely need to support
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    outputs:
      git_hash: ${{ steps.new-git-hash.outputs.git_hash }}
      code_version: ${{ steps.code-ver.outputs.code_version }}
      code_version_new: ${{ steps.new-code-version.outputs.code_version_new }}
      version_major: ${{ steps.version.outputs.major }}
      version_minor: ${{ steps.version.outputs.minor }}
      version_patch: ${{ steps.version.outputs.patch }}
      version_prerelease: ${{ steps.version.outputs.prerelease }}
      version_build: ${{ steps.version.outputs.build }}
      version_full: ${{ steps.version.outputs.full }}
      number_of_commits_since_tag: ${{ steps.num-commits-since-tag.outputs.num_commits_since_tag }}
    steps:
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          code-version: '3.10'
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
          ref: ${{ needs.create-temp-branch.outputs.temp_branch_ref }}
      - name: Git e-mail
        run: git config --global user.email "${EMAIL}"
      - name: Git name
        run: git config --global user.name "${NAME}"
      - name: What version are we?
        id: code-ver
        run: |
          # Extract version from pyproject.toml
          export tt_tools_ver="$(grep -E '^version\s*=' pyproject.toml | sed 's/version\s*=\s*"\([^"]*\)".*/\1/')"
          echo "code_version=${tt_tools_ver}"
          echo "code_version=${tt_tools_ver}" >> "$GITHUB_OUTPUT"
      - name: Dry run version bump to get new version
        id: dry-run-version
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INITIAL_VERSION: ${{ steps.code-ver.outputs.code_version }}
          WITH_V: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: ${{ needs.create-temp-branch.outputs.temp_branch_ref }}
          DRY_RUN: true
          TAG_CONTEXT: repo
          PRERELEASE: false
      - name: What NEW Version?
        id: new-code-version
        run: |
          export code_version_new="${{ steps.dry-run-version.outputs.new_tag }}"
          echo "code_version_new=${code_version_new}"
          echo "code_version_new=${code_version_new}" >> "$GITHUB_OUTPUT"
      - name: Parse version from string
        id: version
        uses: release-kit/semver@v2
        with:
          string: ${{ steps.new-code-version.outputs.code_version_new }}
      - name: Find number of commits since last tag
        id: num-commits-since-tag
        run: |
          export num_commits_since="num_commits_since_tag=$( git rev-list $(git describe --tags --abbrev=0)..HEAD --count )"
          echo "${num_commits_since}"
          echo "${num_commits_since}" >> "$GITHUB_OUTPUT"
      - run: echo ${{ steps.code-ver.outputs.code_version }}
      - name: Update version in project files
        run: |
          # Update version in pyproject.toml (strip the 'v' prefix for the file)
          version_without_v="${{ steps.new-code-version.outputs.code_version_new }}"${{ needs.create-temp-branch.outputs.new-branch-ref }}
          version_without_v="${version_without_v#v}"
          sed -i "s/^version\s*=\s*['\"][^'\"]*['\"]/version = \"${version_without_v}\"/" pyproject.toml

          # Commit the version update
          git add pyproject.toml
          git commit -m "Version bump to ${{ steps.new-code-version.outputs.code_version_new }}"
          git push
      - name: Find New Git Hash
        id: new-git-hash
        run: |
          export git_hash_env="git_hash=$( git log --format="%H" -n 1 )"
          echo "${git_hash_env}"
          echo "${git_hash_env}" >> "$GITHUB_OUTPUT"
      - name: New Git Hash
        run: echo "${git_hash_env}"
    env:
      EMAIL: releases@tenstorrent.com
      NAME: Tenstorrent Releases

  ###
  # Change Logs Generation
  ###
  changelogs:
    needs:
      - create-temp-branch
      - versionchange
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    outputs:
      git_hash: ${{ steps.new-git-hash.outputs.git_hash }}
    env:
        MAJOR: ${{ needs.versionchange.outputs.version_major }}
        MINOR: ${{ needs.versionchange.outputs.version_minor }}
        PATCH: ${{ needs.versionchange.outputs.version_patch }}
        NUMBER_OF_COMMITS_SINCE_TAG: ${{ needs.versionchange.outputs.number_of_commits_since_tag }}
    steps:
      - name: New Git Hash
        run: echo "${{ needs.versionchange.outputs.git_hash }}"
      - run: echo ${{ needs.versionchange.outputs.git_hash }}
      - run: sudo apt update
      - run: |
          sudo apt install -y \
            git-buildpackage
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
          ref: ${{ needs.create-temp-branch.outputs.temp_branch_ref }}
      # Ok checkout doesn't do what I want it to do in the way it does it *sigh*
      # so we need to snag a pull to catch up from where it started
      #- run: git pull
      - run: git log --format="%H" -n 1
      #- name: Extract version from tag
      #  uses: damienaicheh/extract-version-from-tag-action@v1.3.0
      - run: git tag
      # Ok this needs to get up leveled somewhere so that it can be shared across Debian and Ubuntu obviously
      - run: ls -lah
      - name: Generate Ubuntu / Debian Changelog
        run: |
          echo "Major: ${MAJOR}"
          echo "Minor: ${MINOR}"
          echo "Patch: ${PATCH}"
          echo "Num Patch: ${NUMBER_OF_COMMITS_SINCE_TAG}"
          gbp dch \
            --debian-branch ${{ needs.create-temp-branch.outputs.temp_branch_ref }} \
            -R \
            -N ${MAJOR}.${MINOR}.${PATCH} \
            --spawn-editor=never
        env:
          EMAIL: releases@tenstorrent.com
          NAME: Tenstorrent Releases
      - name: ok what happened
        run: git diff
      - name: Setup commit
        run: |
          git config --global user.email "${EMAIL}"
          git config --global user.name "${NAME}"
          git add .
          git commit \
            -m "Generating Ubuntu & Debian Changelog for ${MAJOR}.${MINOR}.${PATCH}-${NUMBER_OF_COMMITS_SINCE_TAG}"
          git pull --rebase
          git push
        env:
          EMAIL: releases@tenstorrent.com
          NAME: Tenstorrent Releases
      - name: Find New Git Hash
        id: new-git-hash
        run: |
          export git_hash_env="git_hash=$( git log --format="%H" -n 1 )"
          echo "${git_hash_env}"
          echo "${git_hash_env}" >> "$GITHUB_OUTPUT"

  ###
  # Trigger Building Everything
  ###
  build_all_depends:
    needs:
      - create-temp-branch
      - versionchange
      - changelogs
    uses: ./.github/workflows/build-all.yml
    with:
      ref: ${{ needs.create-temp-branch.outputs.temp_branch_ref }}
      MAJOR: ${{ needs.versionchange.outputs.version_major }}
      MINOR: ${{ needs.versionchange.outputs.version_minor }}
      PATCH: ${{ needs.versionchange.outputs.version_patch }}
      NUMBER_OF_COMMITS_SINCE_TAG: ${{ needs.versionchange.outputs.number_of_commits_since_tag }}
    secrets: inherit

  # Tag the Release
  ###
  tagrelease:
    needs:
      - versionchange
      - changelogs
      - build_all_depends
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: New Git Hash
        run: echo "${{ needs.changelogs.outputs.git_hash }}"
      - run: echo ${{ needs.versionchange.outputs.git_hash }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.changelogs.outputs.git_hash }}
          fetch-tags: true
          fetch-depth: 0
      - run: git log --format="%H" -n 1
      - run: |
          echo ${{ needs.versionchange.outputs.code_version_new }}
          echo ${{ needs.versionchange.outputs.git_hash }}
          git tag ${{ needs.versionchange.outputs.code_version_new }}
          git tag
          git push --tags

  ###
  # Generate Release
  ###
  generate-release:
    name: Create GitHub Release
    needs:
      - create-temp-branch
      - versionchange
      - build_all_depends
      - tagrelease
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          mode: "HYBRID" # Include both PRs and direct commits
          configurationJSON: |
            {
              "template": "#{{CHANGELOG}}\n\n## Contributors\n#{{CONTRIBUTORS}}",
              "categories": [
                {
                  "title": "## 🔄 Changes",
                  "labels": []
                }
              ],
              "pr_template": "- #{{TITLE}} (#{{NUMBER}}) by @#{{AUTHOR}}",
              "commit_template": "- #{{TITLE}} (#{{MERGE_SHA}}) by @#{{AUTHOR}}"
            }

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/
          merge-multiple: true

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release create '${{ needs.versionchange.outputs.code_version_new }}' \
            --repo '${{ github.repository }}' \
            --notes "${{ steps.build_changelog.outputs.changelog }}" \
            release-artifacts/*

  ###
  # Merge back
  ###
  mergeback:
    needs:
      - create-temp-branch
      - generate-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout fun!
        uses: actions/checkout@v4
        with:
          # Note: you want the original ref, we are merging back
          #ref: ${{ github.ref }}"
          fetch-tags: true
          fetch-depth: 0
      - name: Merge back
        run: |
          git log -3 --oneline
          git rebase origin/${{ needs.create-temp-branch.outputs.temp_branch_ref }}
          git pull --rebase
          git log -3 --oneline
          git push
          git push origin --delete ${{ needs.create-temp-branch.outputs.temp_branch_ref }}

  ###
  # Publish TEST PyPi
  ###
  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    needs:
      - build_all_depends
      - generate-release
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/tt-tools-common

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download Python distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      - name: Publish distribution 📦 to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  ###
  # Publish PyPi
  ###
  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    # Disable for now
    #if: false
    needs:
      - build_all_depends
      - generate-release
      - publish-to-testpypi
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/tt-tools-common
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download Python distributions
      uses: actions/download-artifact@v4
      with:
        name: release-dists
        path: dist/

    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
